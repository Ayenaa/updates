✅ Step-by-Step Guide to Complete the Report Management Module
🔧 1. Setup the Project and DB Connection
🛠 Step 1.1: Open or Create ASP.NET MVC Project
Open Visual Studio

File → New → Project → ASP.NET Web Application → MVC Template



🛠 Step 1.2: Connect to SQL Server (SSMS)
In Web.config, configure your database connection:

xml
Copy
Edit
<connectionStrings>
  <add name="DefaultConnection" 
       connectionString="Server=YOUR_SQL_SERVER_NAME;Database=BankLoanDB;Trusted_Connection=True;" 
       providerName="System.Data.SqlClient" />
</connectionStrings>
Replace:

YOUR_SQL_SERVER_NAME – Use (localdb)\MSSQLLocalDB or your actual server name

BankLoanDB – Your actual DB name created in SSMS



🧱 2. Create Models (Map to DB Tables)
Assuming these backend tables in SSMS:

Customers

Loans

Repayments

✍️ Models/Customer.cs:-
csharp
Copy
Edit
public class Customer
{
    public int CustomerId { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }

    public virtual ICollection<Loan> Loans { get; set; }
}
✍️ Models/Loan.cs:-
csharp
Copy
Edit
public class Loan
{
    public int LoanId { get; set; }
    public decimal Amount { get; set; }
    public DateTime CreatedDate { get; set; }

    public int CustomerId { get; set; }
    public virtual Customer Customer { get; set; }

    public virtual ICollection<Repayment> Repayments { get; set; }
}
✍️ Models/Repayment.cs:-
csharp
Copy
Edit
public class Repayment
{
    public int RepaymentId { get; set; }
    public decimal AmountPaid { get; set; }
    public DateTime PaidDate { get; set; }

    public int LoanId { get; set; }
    public virtual Loan Loan { get; set; }
}




📦 3. Set Up EF DbContext
✍️ Models/ApplicationDbContext.cs:-
csharp
Copy
Edit
public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext() : base("DefaultConnection") {}

    public DbSet<Customer> Customers { get; set; }
    public DbSet<Loan> Loans { get; set; }
    public DbSet<Repayment> Repayments { get; set; }
}




📈 4. Create ViewModels for Reports
✍️ Models/ReportViewModels.cs:-
csharp
Copy
Edit
public class LoanReportViewModel
{
    public int TotalLoans { get; set; }
    public decimal TotalLoanAmount { get; set; }
    public List<Loan> Loans { get; set; }
}

public class RepaymentReportViewModel
{
    public int TotalRepayments { get; set; }
    public decimal TotalRepaidAmount { get; set; }
    public List<Repayment> Repayments { get; set; }
}

public class OutstandingLoanReportViewModel
{
    public List<Loan> OutstandingLoans { get; set; }
}




🎯 5. Build the ReportController
✍️ Controllers/ReportController.cs:-
csharp
Copy
Edit
public class ReportController : Controller
{
    private readonly ApplicationDbContext _context = new ApplicationDbContext();

    public ActionResult GenerateLoanReport()
    {
        var loans = _context.Loans.Include(l => l.Customer).ToList();
        var totalLoans = loans.Count;
        var totalLoanAmount = loans.Sum(l => l.Amount);

        var viewModel = new LoanReportViewModel
        {
            TotalLoans = totalLoans,
            TotalLoanAmount = totalLoanAmount,
            Loans = loans
        };

        return View("LoanReport", viewModel);
    }

    public ActionResult GenerateRepaymentReport()
    {
        var repayments = _context.Repayments.Include(r => r.Loan.Customer).ToList();
        var totalRepayments = repayments.Count;
        var totalRepaidAmount = repayments.Sum(r => r.AmountPaid);

        var viewModel = new RepaymentReportViewModel
        {
            TotalRepayments = totalRepayments,
            TotalRepaidAmount = totalRepaidAmount,
            Repayments = repayments
        };

        return View("RepaymentReport", viewModel);
    }

    public ActionResult GenerateOutstandingLoansReport()
    {
        var loans = _context.Loans.Include(l => l.Customer).Include(l => l.Repayments).ToList();
        var outstandingLoans = loans
            .Where(l => l.Amount > l.Repayments.Sum(r => r.AmountPaid)).ToList();

        var viewModel = new OutstandingLoanReportViewModel
        {
            OutstandingLoans = outstandingLoans
        };

        return View("OutstandingLoansReport", viewModel);
    }
}





📄 6. Create Razor Views
🖼 Views/Report/LoanReport.cshtml
html
Copy
Edit
@model YourApp.Models.LoanReportViewModel
<h2>Loan Report</h2>
<p>Total Loans: @Model.TotalLoans</p>
<p>Total Loan Amount: @Model.TotalLoanAmount</p>

<table class="table">
    <thead>
        <tr><th>Customer</th><th>Amount</th><th>Date</th></tr>
    </thead>
    <tbody>
    @foreach (var loan in Model.Loans)
    {
        <tr>
            <td>@loan.Customer.Name</td>
            <td>@loan.Amount</td>
            <td>@loan.CreatedDate.ToShortDateString()</td>
        </tr>
    }
    </tbody>
</table>
👉 Similarly create RepaymentReport.cshtml and OutstandingLoansReport.cshtml.





📋 7. Create Navigation (Optional)
Example: Add links in a view or layout page:
html
Copy
Edit
<a href="@Url.Action("GenerateLoanReport", "Report")">Loan Report</a>
<a href="@Url.Action("GenerateRepaymentReport", "Report")">Repayment Report</a>
<a href="@Url.Action("GenerateOutstandingLoansReport", "Report")">Outstanding Loans</a>