<script>
    $(document).ready(function () {
        setTimeout(repayment_initializePagination, 100);

        $("#btnExport").click(function () {
            repayment_exportToPDF('repaymentReportTable', 'Repayment_Report');
        });
    });

    // Unique variable namespace to avoid collision
    let repayment_currentPage = 1;
    let repayment_rowsPerPage = 10;
    let repayment_allRows = [];
    let repayment_filteredRows = [];

    function repayment_initializePagination() {
        repayment_allRows = Array.from(document.querySelectorAll('#repaymentReportTable .report-row'));
        repayment_filteredRows = [...repayment_allRows];
        repayment_updateTable();
        document.getElementById('statusFilter')?.addEventListener('change', repayment_applyFilters);
        document.getElementById('productFilter')?.addEventListener('change', repayment_applyFilters);
    }

    function repayment_applyFilters() {
        const statusFilter = document.getElementById('statusFilter')?.value.toLowerCase();
        const productFilter = document.getElementById('productFilter')?.value.toLowerCase();

        repayment_filteredRows = repayment_allRows.filter(row => {
            const cells = row.getElementsByTagName('td');
            if (cells.length === 0) return false;

            const isAdmin = cells.length === 10;
            const productTypeIndex = isAdmin ? 4 : 2;
            const statusIndex = isAdmin ? 9 : 7;

            const productTypeText = cells[productTypeIndex]?.textContent.trim().toLowerCase() || '';
            const statusText = cells[statusIndex]?.textContent.trim().toLowerCase() || '';

            const matchesStatus = !statusFilter || statusText.includes(statusFilter);
            const matchesProduct = !productFilter || productTypeText.includes(productFilter);

            return matchesStatus && matchesProduct;
        });

        repayment_currentPage = 1;
        repayment_updateTable();
    }

    function repayment_updateTable() {
        repayment_allRows.forEach(row => row.style.display = 'none');

        const totalRows = repayment_filteredRows.length;
        const totalPages = Math.ceil(totalRows / repayment_rowsPerPage) || 1;
        const startIndex = (repayment_currentPage - 1) * repayment_rowsPerPage;
        const endIndex = Math.min(startIndex + repayment_rowsPerPage, totalRows);

        for (let i = startIndex; i < endIndex; i++) {
            if (repayment_filteredRows[i]) {
                repayment_filteredRows[i].style.display = '';
            }
        }

        repayment_updatePagination(totalPages, totalRows, startIndex, endIndex);
    }

    function repayment_updatePagination(totalPages, totalRows, startIndex, endIndex) {
        const paginationContainer = document.getElementById('repaymentPaginationContainer');
        const paginationInfo = document.getElementById('repaymentPaginationInfo');
        paginationContainer.innerHTML = '';

        if (totalPages <= 1) {
            const singleBtn = repayment_createPaginationButton('1', 1, false, true);
            paginationContainer.appendChild(singleBtn);
        } else {
            paginationContainer.appendChild(repayment_createPaginationButton('«', 1, repayment_currentPage === 1));
            paginationContainer.appendChild(repayment_createPaginationButton('‹', repayment_currentPage - 1, repayment_currentPage === 1));

            const maxVisiblePages = 5;
            let startPage = Math.max(1, repayment_currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationContainer.appendChild(repayment_createPaginationButton(i, i, false, i === repayment_currentPage));
            }

            paginationContainer.appendChild(repayment_createPaginationButton('›', repayment_currentPage + 1, repayment_currentPage === totalPages));
            paginationContainer.appendChild(repayment_createPaginationButton('»', totalPages, repayment_currentPage === totalPages));
        }

        paginationInfo.innerHTML = totalRows > 0
            ? `<i class="fas fa-info-circle"></i> Showing ${startIndex + 1} to ${endIndex} of ${totalRows} entries`
            : `<i class="fas fa-info-circle"></i> No matching records found`;
    }

    function repayment_createPaginationButton(text, page, disabled, active = false) {
        const li = document.createElement('li');
        li.className = `page-item ${active ? 'active' : ''} ${disabled ? 'disabled' : ''}`;

        const button = document.createElement('a');
        button.className = 'page-link';
        button.innerHTML = text;
        button.href = '#';

        if (!disabled) {
            button.onclick = (e) => {
                e.preventDefault();
                repayment_goToPage(page);
            };
        }

        li.appendChild(button);
        return li;
    }

    function repayment_goToPage(page) {
        repayment_currentPage = page;
        repayment_updateTable();
    }

    function repayment_exportToPDF(tableId, filename) {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        doc.setFontSize(16);
        doc.text('Repayment Report', 14, 15);

        doc.setFontSize(10);
        doc.text('Generated on: ' + new Date().toLocaleDateString(), 14, 25);

        const table = document.getElementById(tableId);
        const headers = [], data = [];

        table.querySelectorAll('thead th').forEach(th => headers.push(th.textContent.trim()));
        table.querySelectorAll('tbody tr').forEach(tr => {
            if (tr.style.display !== 'none') {
                const row = [];
                tr.querySelectorAll('td').forEach(td => row.push(td.textContent.trim()));
                data.push(row);
            }
        });

        doc.autoTable({
            head: [headers],
            body: data,
            startY: 35,
            styles: { fontSize: 8, cellPadding: 2 },
            headStyles: { fillColor: [44, 62, 80], textColor: 255 }
        });

        const timestamp = new Date().toISOString().replace(/[-:.]/g, "");
        doc.save(`${filename}_${timestamp}.pdf`);
    }
</script>
