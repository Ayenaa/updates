@model List<BankLoanProject.Models.RepaymentReportViewModel>
@{
    var role = Context.Session.GetString("Role");
    Layout = null;
}

<!-- Repayment Report Section -->
<div id="repayment" class="report-section table-container">
    <div class="section-header">
        <div class="section-info">
            @* <span class="badge bg-success mb-2">Repayment Reports</span> *@
            <h4 class="mb-2">
                <i class="fas fa-receipt me-2"></i>
                Repayment Report
            </h4>
            @* <p class="text-muted">Monitor loan repayment schedules and payment history.</p> *@
        </div>
        <div class="export-filter-controls">
            <button class="btn btn-export" id="btnExport">
                <i class="fas fa-file-pdf"></i> Export PDF
            </button>
            <!-- Filter Dropdown -->
            <div>
                <label for="statusFilter" class="form-label"><i class="fas fa-filter me-1"></i>Status</label>
                <select id="statusFilter" class="form-select filter-dropdown">
                    <option value="">All</option>
                    <option value="Pending">Pending</option>
                    <option value="Completed">Completed</option>
                </select>
            </div>

        </div>
    </div>

    <div class="table-wrapper">
        <table class="table table-bordered" id="repaymentReportTable">
            <thead>
                <tr>
                    <th scope="col" class="col-repayment-id">Repayment ID</th>
                    @if (role == "Admin")
                    {
                        <th scope="col" class="col-customer-id">Customer ID</th>
                        <th scope="col" class="col-customer-name">Customer Name</th>
                    }
                    <th scope="col" class="col-loan-id">Loan ID</th>
                    <th scope="col" class="col-amount-due">Amount Due</th>
                    <th scope="col" class="col-due-date">Due Date</th>
                    <th scope="col" class="col-payment-date">Payment Date</th>
                    <th scope="col" class="col-status">Status</th>
                </tr>
            </thead>
            <tbody class="report-table-body">
                @foreach (var report in Model)
                {
                    <tr class="report-row">
                        <td class="text-center"><strong>@report.RepaymentId</strong></td>
                        @if (role == "Admin")
                        {
                            <td class="text-center">@report.CustomerId</td>
                            <td class="text-center"><strong>@report.CustomerName</strong></td>
                        }
                        <td class="text-center">@report.LoanId</td>
                        <td class="text-center"><span class="amount">@report.AmountDue.ToString("C")</span></td>
                        <td class="text-center">@report.DueDate.ToString("dd/MM/yyyy")</td>
                        <td class="text-center">@(report.PaymentDate.HasValue? report.PaymentDate.Value.ToString("dd/MM/yyyy") : "Not Paid")</td>
                        <td class="text-center">
                            @{
                                string statusClass = "";
                                string statusIcon = "";
                                switch (report.PaymentStatus?.ToUpper())
                                {
                                    case "COMPLETED":
                                        statusClass = "status-completed";
                                        statusIcon = "fas fa-check-circle";
                                        break;
                                    case "PENDING":
                                        statusClass = "status-pending";
                                        statusIcon = "fas fa-clock";
                                        break;
                                    default:
                                        statusClass = "status-pending";
                                        statusIcon = "fas fa-clock";
                                        break;
                                }
                            }
                            <span class="status-badge @statusClass">
                                <i class="@statusIcon"></i>@report.PaymentStatus
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Section -->
    <div class="pagination-section">
        <div class="pagination-info" id="repaymentPaginationInfo">
            <!-- Pagination info will be generated by JavaScript -->
        </div>
        <nav aria-label="Repayment report pagination">
            <ul class="pagination" id="repaymentPaginationContainer">
                <!-- Pagination buttons will be generated by JavaScript -->
            </ul>
        </nav>
    </div>
</div>
<script>
    $(document).ready(function () {
        setTimeout(initializePagination, 100);
        $("#btnExport").click(() => exportToPDF('repaymentReportTable', 'Repayment_Report'));
        $("#statusFilter, #paymentDateFilter").on("change", applyFilters);
    });

    let currentPage = 1;
    let rowsPerPage = 10;
    let allRows = [], filteredRows = [];

    function initializePagination() {
        allRows = Array.from(document.querySelectorAll('.report-row'));
        filteredRows = [...allRows];
        updateTable();
    }

        function applyFilters() {
      const statusFilter = $("#statusFilter").val().toLowerCase();
      const paymentDate = $("#paymentDateFilter").val();
      const role = 'Admin';
      filteredRows = allRows.filter(row => {
        const cells = row.querySelectorAll('td');
        let status = "", rowDate = "";
        if (role === "Admin") {
          status = cells[7].textContent.trim().toLowerCase();
          rowDate = cells[6].textContent.trim();
        } else {
          status = cells[5].textContent.trim().toLowerCase();
          rowDate = cells[4].textContent.trim();
        }
        let matchStatus = !statusFilter || status.includes(statusFilter);
        let matchDate = true;
        if (paymentDate && rowDate !== "Not Paid") {
          const parts = rowDate.split("/");
          if (parts.length === 3) {
            const formatted = `${parts[2]}-${parts[1]}-${parts[0]}`;
            matchDate = paymentDate === formatted;
          }
        }
        return matchStatus && matchDate;
      });
      currentPage = 1;
      updateTable();
    }


    function updateTable() {
        allRows.forEach(row => row.style.display = 'none');
        const totalRows = filteredRows.length;
        const totalPages = Math.ceil(totalRows / rowsPerPage) || 1;
        const start = (currentPage - 1) * rowsPerPage;
        const end = Math.min(start + rowsPerPage, totalRows);

        for (let i = start; i < end; i++) {
            if (filteredRows[i]) filteredRows[i].style.display = '';
        }

        updatePagination(totalPages, totalRows, start, end);
    }

    function updatePagination(totalPages, totalRows, start, end) {
        const container = document.getElementById('repaymentPaginationContainer');
        const info = document.getElementById('repaymentPaginationInfo');
        container.innerHTML = '';

        if (totalPages <= 1) {
            container.appendChild(createPaginationButton('1', 1, false, true));
        } else {
            container.appendChild(createPaginationButton('«', 1, currentPage === 1));
            container.appendChild(createPaginationButton('‹', currentPage - 1, currentPage === 1));

            const maxPages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxPages / 2));
            let endPage = Math.min(totalPages, startPage + maxPages - 1);
            if (endPage - startPage + 1 < maxPages) startPage = Math.max(1, endPage - maxPages + 1);

            for (let i = startPage; i <= endPage; i++) {
                container.appendChild(createPaginationButton(i, i, false, i === currentPage));
            }

            container.appendChild(createPaginationButton('›', currentPage + 1, currentPage === totalPages));
            container.appendChild(createPaginationButton('»', totalPages, currentPage === totalPages));
        }

        info.innerHTML = totalRows > 0
            ? `<i class="fas fa-info-circle"></i> Showing ${start + 1} to ${end} of ${totalRows} entries`
            : `<i class="fas fa-info-circle"></i> No matching records found`;
    }

    function createPaginationButton(text, page, disabled, active = false) {
        const li = document.createElement('li');
        li.className = `page-item ${active ? 'active' : ''} ${disabled ? 'disabled' : ''}`;
        const a = document.createElement('a');
        a.className = 'page-link';
        a.href = '#';
        a.innerHTML = text;
        if (!disabled) a.onclick = e => { e.preventDefault(); goToPage(page); };
        li.appendChild(a);
        return li;
    }

    function goToPage(page) {
        currentPage = page;
        updateTable();
    }

    function exportToPDF(tableId, filename) {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        doc.setFontSize(16).text('Repayment Report', 14, 15);
        doc.setFontSize(10).text('Generated on: ' + new Date().toLocaleDateString(), 14, 25);

        const table = document.getElementById(tableId);
        const headers = [], data = [];

        table.querySelectorAll('thead th').forEach(th => headers.push(th.textContent.trim()));
        table.querySelectorAll('tbody tr').forEach(tr => {
            if (tr.style.display !== 'none') {
                const row = [];
                tr.querySelectorAll('td').forEach(td => row.push(td.textContent.trim()));
                data.push(row);
            }
        });

        doc.autoTable({ head: [headers], body: data, startY: 35, styles: { fontSize: 8, cellPadding: 2 }, headStyles: { fillColor: [44, 62, 80], textColor: 255 } });
        const timestamp = new Date().toISOString().replace(/[-:.]/g, "");
        doc.save(`${filename}_${timestamp}.pdf`);
    }
</script>
